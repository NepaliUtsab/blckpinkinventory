name: Build and Release

on:
  push:
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  # Disabled tests as requested
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Set up JDK ${{ env.JAVA_VERSION }}
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: ${{ env.JAVA_VERSION }}
  #       distribution: ${{ env.JAVA_DISTRIBUTION }}
  #       
  #   - name: Cache Gradle packages
  #     uses: actions/cache@v4
  #     with:
  #       path: |
  #         ~/.gradle/caches
  #         ~/.gradle/wrapper
  #       key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
  #       restore-keys: |
  #         ${{ runner.os }}-gradle-
  #         
  #   - name: Grant execute permission for gradlew
  #     run: chmod +x gradlew
  #     
  #   - name: Run tests
  #     run: ./gradlew test
  #     
  #   - name: Upload test results
  #     uses: actions/upload-artifact@v4
  #     if: always()
  #     with:
  #       name: test-results
  #       path: build/test-results/
        
  build-linux:
    name: Build Linux Package
    runs-on: ubuntu-latest
    # needs: test  # Disabled since tests are commented out
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build and package for Linux
      run: |
        ./gradlew build
        ./gradlew packageDeb
        ./gradlew packageRpm
        
    - name: Upload Linux packages
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          build/compose/binaries/main/deb/*.deb
          build/compose/binaries/main/rpm/*.rpm
        retention-days: 30
        
  build-macos:
    name: Build macOS Package
    runs-on: macos-latest
    # needs: test  # Disabled since tests are commented out
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build and package for macOS
      run: |
        ./gradlew build
        ./gradlew packageDmg
        
    - name: Upload macOS package
      uses: actions/upload-artifact@v4
      with:
        name: macos-package
        path: build/compose/binaries/main/dmg/*.dmg
        retention-days: 30
        
  build-windows:
    name: Build Windows Package
    runs-on: windows-latest
    # needs: test  # Disabled since tests are commented out
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Build application
      run: ./gradlew build
      
    - name: Package MSI
      run: ./gradlew packageMsi
      
    - name: Create distributable
      run: ./gradlew createDistributable
      
    - name: Install NSIS
      run: |
        choco install nsis -y
        
    - name: Build NSIS installer
      run: |
        # Create dist directory
        New-Item -ItemType Directory -Force -Path "dist"
        
        # Build NSIS installer
        makensis windows-installer.nsi
      shell: powershell
      
    - name: Upload Windows MSI
      uses: actions/upload-artifact@v4
      with:
        name: windows-msi
        path: build/compose/binaries/main/msi/*.msi
        retention-days: 30
        
    - name: Upload Windows NSIS installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-nsis-installer
        path: dist/*.exe
        retention-days: 30
        
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Display structure of downloaded files
      run: ls -la
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Black and Pink Inventory Management ${{ github.ref }}
        body: |
          ## üöÄ Black and Pink Inventory Management Release
          
          ### Features
          - Complete inventory management system
          - Session tracking and management
          - Category-based filtering
          - Search functionality
          - Card and List view modes
          - Text selection and copying
          
          ### Downloads
          - **Windows**: Download the MSI installer or NSIS installer
          - **macOS**: Download the DMG package
          - **Linux**: Download DEB or RPM package
          
          ### System Requirements
          - Windows 10+ (64-bit) / macOS 10.14+ / Ubuntu 18.04+
          - 4GB RAM minimum
          - 200MB free disk space
          
          Built with ‚ù§Ô∏è for Black and Pink organizations.
        draft: false
        prerelease: false
        
    - name: Upload Windows MSI
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: windows-msi/BlackAndPink-1.0.0.msi
        asset_name: BlackAndPink-Setup-1.0.0.msi
        asset_content_type: application/octet-stream
        
    - name: Upload Windows NSIS Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: windows-nsis-installer/BlackAndPink-Setup-1.0.0.exe
        asset_name: BlackAndPink-Setup-1.0.0.exe
        asset_content_type: application/octet-stream
        
    - name: Upload macOS DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: macos-package/BlackAndPink-1.0.0.dmg
        asset_name: BlackAndPink-1.0.0.dmg
        asset_content_type: application/octet-stream
        
    - name: Upload Linux DEB
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: linux-packages/blackandpink_1.0.0-1_amd64.deb
        asset_name: BlackAndPink-1.0.0.deb
        asset_content_type: application/octet-stream
        
    - name: Upload Linux RPM
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: linux-packages/blackandpink-1.0.0-1.x86_64.rpm
        asset_name: BlackAndPink-1.0.0.rpm
        asset_content_type: application/octet-stream
